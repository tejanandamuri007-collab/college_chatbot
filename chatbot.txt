<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>College Insight Chatbot</title>
    <!-- Load Tailwind CSS --><script src="https://cdn.tailwindcss.com"></script>
    <!-- Load Lucide Icons for aesthetic buttons --><script src="https://unpkg.com/lucide@latest"></script>
    <style>
        /* Custom styles for a modern, rounded chat interface */
        :root {
            --primary-color: #4f46e5; /* User bubble color (Indigo-600) */
            --radiant-blue-start: #0077ff; /* Bright Blue */
            --radiant-blue-end: #0033aa; /* Deep Blue */
            --bot-bubble: #f3f4f6; /* Gray-100 */
            --user-bubble: var(--primary-color);
        }

        body {
            font-family: 'Inter', sans-serif;
            background-image: url('https://i.postimg.cc/cHR1h477/1727246051php-AX4sq7.jpg'); /* Background image */
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            background-color: #eef2ff;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 1rem;
            position: relative;
            overflow: hidden;
        }

        /* Transparent overlay over the background image */
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(238, 242, 255, 0.7);
            z-index: -1;
        }

        .card-container {
            width: 100%;
            max-width: 640px;
            /* Height changes based on content (login is shorter, chat is taller) */
            display: flex;
            flex-direction: column;
            /* --- RADIANT BLUE & SHINY TEXTURE STYLES (Outer container) --- */
            background: linear-gradient(145deg, var(--radiant-blue-start) 0%, var(--radiant-blue-end) 100%);
            border: 2px solid rgba(255, 255, 255, 0.5); /* Lighter border for shine */
            border-radius: 1rem;
            box-shadow: 0 0 35px rgba(0, 100, 255, 0.5), inset 0 0 10px rgba(255, 255, 255, 0.3); /* Glow and inner shine */
            overflow: hidden;
            z-index: 1;
        }

        /* Styling for the Welcome Screen (centered within the blue container) */
        #login-view {
            width: 100%;
            height: 90vh;
            max-height: 800px;
            justify-content: center;
            align-items: center;
            padding: 2rem;
        }

        /* Cool Glassmorphism Welcome Card */
        #login-card {
            background-color: rgba(255, 255, 255, 0.85); /* Semi-transparent white */
            backdrop-filter: blur(10px); /* Frosted glass effect */
            -webkit-backdrop-filter: blur(10px); /* For Safari support */
            padding: 2rem;
            border-radius: 1.5rem; /* Larger border radius for modern look */
            border: 1px solid rgba(255, 255, 255, 0.5); /* Subtle white border */
            box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.25); /* Stronger shadow for depth */
            width: 100%;
            max-width: 400px;
            text-align: center;
            transition: all 0.3s ease;
            transform: scale(1.05); /* Slightly enlarge to pop out */
        }
        
        #chat-container {
            /* Inherits general card-container styles, adjusted for chat flow */
            height: 90vh;
            max-height: 800px;
            flex-direction: column; 
        }

        .chat-header {
            padding: 1rem; 
            color: white; 
            display: flex; 
            align-items: center; 
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            background: linear-gradient(145deg, var(--radiant-blue-start) 0%, var(--radiant-blue-end) 100%);
        }
        
        #chat-history {
            flex-grow: 1;
            overflow-y: auto;
            padding: 1rem;
            background-color: white; 
            scroll-behavior: smooth;
        }

        /* Input Area update - kept white for contrast */
        #input-area {
            padding: 1rem; 
            border-top: 1px solid #ccc; 
            background-color: white; 
            display: flex; 
            align-items: center;
        }

        /* Styling for the messages */
        .message-bubble {
            padding: 0.75rem 1rem;
            border-radius: 1.25rem;
            max-width: 85%;
            margin-bottom: 0.75rem;
            line-height: 1.5;
            word-wrap: break-word;
        }
        .user-message {
            background-color: var(--user-bubble);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 0.25rem;
        }
        .bot-message {
            background-color: var(--bot-bubble);
            color: #1f2937; /* Gray-800 */
            margin-right: auto;
            border-bottom-left-radius: 0.25rem;
            white-space: pre-wrap; /* Preserve formatting from the LLM */
        }
        /* Style for anchor tags in the bot's response to make them stand out */
        .bot-message a {
            color: var(--primary-color); /* Indigo link color */
            text-decoration: underline;
            font-weight: 600;
        }
        /* --- NEW STYLES FOR NEAT RESPONSES --- */
        .info-card {
            background-color: white;
            border-radius: 0.75rem;
            padding: 1rem;
            border: 1px solid #e5e7eb; /* Light border */
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            margin-top: 0.5rem;
            /* FIX for long text overflow: */
            word-break: break-word;
        }
        .info-card ul {
            display: flex;
            flex-wrap: wrap; /* Allow items to wrap to next line */
            padding: 0;
            margin: 0;
            list-style: none;
        }
        .info-item {
            display: flex;
            align-items: flex-start; /* Align icon and text to top */
            margin-bottom: 0.5rem;
            width: 50%; /* Attempt to arrange items in two columns for lists of departments */
            min-width: 150px; /* Minimum width to prevent stacking too early */
            padding-right: 1rem;
        }
        @media (max-width: 480px) {
            .info-item {
                width: 100%; /* Full width on smaller screens */
            }
        }
        .info-icon {
            font-size: 1.2rem;
            margin-right: 0.5rem;
            color: var(--primary-color);
            line-height: 1.5; /* Ensure icon aligns with text */
            flex-shrink: 0; /* Prevent icon from shrinking */
        }
        .link-list {
            list-style: none;
            padding: 0;
            margin-top: 0.5rem;
        }
        .link-list li {
            margin-bottom: 0.3rem;
            padding-left: 1.5rem;
            position: relative;
        }
        .link-list li::before {
            content: "🔗"; /* Link icon for visualization */
            position: absolute;
            left: 0;
            top: 0;
        }
        /* ------------------------------------- */

        .loading-dot {
            width: 8px;
            height: 8px;
            background-color: var(--primary-color); /* FIX: Changed from white to primary color for visibility */
            border-radius: 50%;
            display: inline-block;
            animation: bounce 1.4s infinite ease-in-out both;
        }
        .loading-dot:nth-child(1) { animation-delay: -0.32s; }
        .loading-dot:nth-child(2) { animation-delay: -0.16s; }
            .loading-dot:nth-child(3) { animation-delay: 0s; }

        @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1.0); }
        }
        
        .mic-active {
            animation: pulse-mic 1s infinite alternate;
        }
        @keyframes pulse-mic {
            from {
                box-shadow: 0 0 0 0 rgba(79, 70, 229, 0.7);
                background-color: #f87171; /* Reddish tone when active */
            }
            to {
                box-shadow: 0 0 0 10px rgba(79, 70, 229, 0);
                background-color: #ef4444;
            }
        }

    </style>
</head>
<body>

<!-- Welcome View - Visible by default -->
<div id="login-view" class="card-container flex">
    <div id="login-card">
        <!-- Welcome Header/Branding -->
        <div class="flex flex-col items-center mb-6">
            <div class="p-3 bg-indigo-600 rounded-full mb-3 shadow-lg">
                <svg class="w-8 h-8 text-white" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"/><path d="M19 10v2a7 7 0 0 1-14 0v-2"/><line x1="12" x2="12" y1="19" y2="22"/></svg>
            </div>
            <h2 class="text-3xl font-bold text-gray-800">Pragati Engineering College Insight Bot</h2>
            <p class="text-gray-500 mt-2">Your 24/7 Official Student Assistant</p>
        </div>
        
        <!-- Welcome Message / Call to Action -->
        <p class="text-gray-600 mb-8 text-lg">
            Get instant, specific answers about admissions, B.Tech/M.Tech courses, fee structure, and campus life at Pragati Engineering College, Surampalem.
        </p>

        <button onclick="startChat()"
                class="w-full p-3 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition duration-150 shadow-md transform hover:scale-[1.01] active:scale-[0.99] focus:outline-none focus:ring-4 focus:ring-indigo-300">
            Start Chatting Now
        </button>
    </div>
</div>

<!-- Chat View - Hidden by default -->
<div id="chat-view" class="card-container hidden">
    <div id="chat-container" class="w-full h-full flex flex-col">
        <!-- Header -->
        <header class="chat-header">
            <div class="p-2 bg-white/20 rounded-full mr-3">
                <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="color: white;"><path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"/><path d="M19 10v2a7 7 0 0 1-14 0v-2"/><line x1="12" x2="12" y1="19" y2="22"/></svg>
            </div>
            <div>
                <h1 class="text-lg font-semibold">Pragati Engineering College Bot</h1>
                <p class="text-xs opacity-80">24/7 Student Support Assistant</p>
            </div>
        </header>

        <!-- Chat History --><div id="chat-history">
            <!-- Initial welcome message added via JS after starting chat -->
        </div>

        <!-- Input Area --><div id="input-area">
            <input type="text" id="user-input" placeholder="Ask a question..."
                   class="flex-grow p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-150"
                   autofocus>

            <!-- New Voice Input Button --><button id="voice-button"
                    class="ml-3 p-3 bg-indigo-600 text-white rounded-full hover:bg-indigo-700 transition duration-150 shadow-md disabled:bg-indigo-400"
                    onclick="startVoiceInput()">
                <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"/><path d="M19 10v2a7 7 0 0 1-14 0v-2"/><line x1="12" x2="12" y1="19" y2="22"/></svg>
            </button>

            <!-- Send Button --><button id="send-button"
                    class="ml-3 p-3 bg-indigo-600 text-white rounded-full hover:bg-indigo-700 transition duration-150 shadow-md disabled:bg-indigo-400"
                    onclick="sendMessage()">
                <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m22 2-7 20-4-9-9-4Z"/><path d="M22 2 11 13"/></svg>
            </button>
        </div>
    </div>
</div>

<script>
    // --- GEMINI API CONFIGURATION ---
    const API_KEY = "AIzaSyD0VriKBX6ekEN-hi6WM9VTuFrlxacGIqc"; // Replace with your actual API Key if running outside of a provided environment
    const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${API_KEY}`;
    
    // --- KNOWLEDGE BASE FROM PRAGATI.AC.IN (Hardcoded stable links) ---
    const KNOWLEDGE_BASE = `
--- Pragati Engineering College Official Data ---
1. Accreditation: Approved by AICTE, Accredited by NBA, Accredited by NAAC with A+ Grade.
2. Courses Offered (Departments): Electronics and Communication Engineering (ECE), Computer Science and Engineering (CSE), Mechanical Engineering (ME), Electrical and Electronics Engineering (EEE), Information Technology (IT), Civil Engineering, CSE (Data Science), CSE (Artificial Intelligence & Machine Learning), CSE (Artificial Intelligence), CSE (Cyber Security), Basic Sciences and Humanities (BSH). M.Tech programs are also available in CSE, PE&ED, VLSI, and CAD CAM.
3. Admission Criteria (UG): Minimum 50% marks in Intermediate/10+2. Admission is primarily based on the Common Entrance Test EAPCET rank.
4. College Codes: EAPCET & ECET Code: PRAG. PGCET Code: PRAG1.
5. Placements (2025 as of May 31): Total 1625 placements. Highest Package: 40 LPA. Other notable packages: 29 LPA, 11 LPA, 6 LPA, 5.50 LPA, 3.60 LPA, 3.36-9.0 LPA.
6. Contact Information: Address: 1-378, ADB Road, Surampalem, Near Peddapuram, Kakinada.Dist, A.P. (Pin 533437). Email: pragati@pragati.ac.in. Phone: +91 7330826667, 08852 252233.
7. **Official Website Link (Home):** <a href="https://pragati.ac.in/" target="_blank">Pragati Engineering College Official Website</a>
8. **Admissions Page Link:** <a href="https://pragati.ac.in/admissions/" target="_blank">Official Admissions Page</a>
9. **Syllabus & Academic Documents Link:** <a href="https://pragati.ac.in/examination/course-structure-syllabus/" target="_blank">View Syllabus & Academic Regulations Page</a>
10. **Academic Calendars Link:** <a href="https://pragati.ac.in/examinations/academic-calendars/" target="_blank">View Academic Calendars Page</a>
11. **Fee & Circulars Link:** <a href="https://pragati.ac.in/admissions/" target="_blank">View Admissions and Fee Details/Circulars</a>
12. Academics: Every semester has a minimum of eight courses, including two labs. Four-year duration.
13. Campus Life/Clubs: Features include Technical, Cultural, Literary, and Industrial Clubs, Sports (Basketball, Volleyball, Cricket, Gym), and SWAYAM NPTEL Local Chapter.
--- End of Data ---
`;

    // System instruction defines the bot's persona and rules.
    const SYSTEM_PROMPT = KNOWLEDGE_BASE + `
You are the 'Pragati Engineering College Insight Bot' for **Pragati Engineering College, Surampalem (Autonomous)**. Your primary goal is to provide accurate, specific, and professional information only about this college.

**Formatting Rules for Neat Responses (CRITICAL):**
* You MUST wrap any structured output (lists, cards, multiple links) in a **single outer <div> with the class \`info-card\`** to ensure proper HTML rendering and prevent JavaScript errors.
* For **overviews (accreditation, courses, admission)**, structure the response using simple HTML list items (\`<ul>\` and \`<li>\`) and classes like \`info-item\`. Ensure each department or long item is listed on a separate \`<li>\` item to prevent text overflow. Use emojis like ✅, 🎓, 📞, 📍, and 🔗 to act as "pictorial" elements to break up the text and categorize information clearly.
* For **lists of links (Syllabus/M.Tech regulations)**, clearly list them using the \`link-list\` class. **For all syllabus, academic calendar, or regulations requests, provide only the stable main links found in data points 9, 10, and 11.** * When providing the academic calendar or syllabus link, you must add the following precise instruction to the user: "🔗 **Click this link, then look for the specific Regulation (R23/R20) and Year (I, II, III, IV) you need on the page to download the PDF.**"
* Responses must be concise. Use **bold text** for emphasis.

**Knowledge Access Rules:**
1.  **Prioritize Hardcoded Data:** Use the exact links and contact details provided in the 'Pragati Engineering College Official Data' immediately upon request.
2.  **Use Google Search Grounding:** For questions about **latest news, current staff members, recent placements (beyond the hardcoded list), or real-time circulars/notifications**, use the Google Search tool to find the most current information, ensuring the results are strictly limited to **Pragati Engineering College, Surampalem**.
3.  **Out-of-Scope Queries:** If a query is NOT about Pragati Engineering College or its associated topics (academics, admissions, staff, placements, etc.), you MUST use the exact phrase: "**I am the Pragati Engineering College Insight Bot, and that query is out of my knowledge scope.**" Do not search the web or provide general knowledge answers for any other topic.

**Crucial Custom Instruction:** When a user asks to call 'Akka' or needs contact info for 'Akka', you must provide the phone number: **79899 3489**.
`;

    // --- DOM ELEMENTS AND UTILITIES ---
    const chatHistory = document.getElementById('chat-history');
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');
    const voiceButton = document.getElementById('voice-button');
    const loginView = document.getElementById('login-view');
    const chatView = document.getElementById('chat-view');

    let chatInitialized = false;
    let recognition = null;

    // Scroll chat to the bottom
    const scrollToBottom = () => {
        chatHistory.scrollTop = chatHistory.scrollHeight;
    };

    // Add message to chat history
    const addMessage = (content, isUser) => {
        const messageDiv = document.createElement('div');
        messageDiv.className = `flex flex-col ${isUser ? 'items-end' : 'items-start'} mb-2`;
        
        const bubble = document.createElement('div');
        bubble.className = `message-bubble ${isUser ? 'user-message' : 'bot-message'}`;
        bubble.innerHTML = content; // Use innerHTML to render HTML anchor tags and bold text

        messageDiv.appendChild(bubble);
        chatHistory.appendChild(messageDiv);
        scrollToBottom();
    };

    // Add loading indicator
    const showLoading = () => {
        const loadingDiv = document.createElement('div');
        loadingDiv.id = 'loading-indicator';
        loadingDiv.className = 'flex flex-col items-start mb-2';
        loadingDiv.innerHTML = `
            <div class="bot-message message-bubble">
                <span class="loading-dot"></span>
                <span class="loading-dot ml-1"></span>
                <span class="loading-dot ml-1"></span>
            </div>
        `;
        chatHistory.appendChild(loadingDiv);
        scrollToBottom();
    };

    // Remove loading indicator
    const hideLoading = () => {
        const loadingDiv = document.getElementById('loading-indicator');
        if (loadingDiv) {
            loadingDiv.remove();
        }
    };

    // --- VOICE INPUT LOGIC ---

    const startVoiceInput = () => {
        if (!('webkitSpeechRecognition' in window)) {
            addMessage("❌ **Error:** Speech recognition is not supported in this browser. Please use Chrome or a Chromium-based browser.", false);
            return;
        }

        if (recognition && recognition.running) {
            recognition.stop();
            return;
        }
        
        // Initialize Speech Recognition API
        recognition = new webkitSpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'en-US';
        recognition.maxAlternatives = 1;

        recognition.onstart = () => {
            voiceButton.classList.add('mic-active');
            voiceButton.disabled = false; // Enable the button to allow stopping
            sendButton.disabled = true;
            userInput.placeholder = "👂 Listening... Speak now!";
        };

        recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            userInput.value = transcript;
            // The logic below will send the message automatically when speech stops
        };

        recognition.onerror = (event) => {
            console.error('Speech recognition error:', event.error);
            // Hide the error message from the chat, just print to console for debugging
            recognition.stop();
        };

        recognition.onend = () => {
            voiceButton.classList.remove('mic-active');
            sendButton.disabled = false;
            userInput.placeholder = "Ask a question...";

            // Automatically send the transcribed text if available
            if (userInput.value.trim().length > 0) {
                sendMessage();
            }
        };

        try {
            recognition.start();
        } catch (e) {
             // Catch error if speech recognition is already active (rare)
            console.error("Speech recognition start error:", e);
        }
    };

    // --- VIEW MANAGEMENT & ENTRY ---
    const showView = (viewId) => {
        if (viewId === 'login') {
            loginView.style.display = 'flex';
            chatView.style.display = 'none';
        } else {
            loginView.style.display = 'none';
            chatView.style.display = 'flex';
        }
    };

    const initializeChat = () => {
        if (!chatInitialized) {
            // Add the initial welcome message only once
            addMessage("Hello! I'm the **Pragati Engineering College Insight Bot**. I am an official assistant ready to help you with questions about admissions, courses (B.Tech/M.Tech), campus life, and more, specific to our Surampalem campus. How can I assist you?", false);
            chatInitialized = true;
        }
        userInput.focus();
    };

    const startChat = () => {
        showView('chat');
        initializeChat();
    };

    // Attach 'Enter' key listeners to the document (will be ignored if the input is disabled)
    const handleKeypress = (e) => {
        if (e.key === 'Enter') {
            // If the chat view is active, try to send a message
            if (chatView.style.display === 'flex' && !sendButton.disabled) {
                sendMessage();
            } 
            // If the login view is active, trigger the chat start
            else if (loginView.style.display === 'flex') {
                startChat();
            }
        }
    };

    // --- API CALL LOGIC WITH EXPONENTIAL BACKOFF ---

    const fetchGeminiResponse = async (contents, maxRetries = 5, delay = 1000) => {
        const payload = {
            contents: contents,
            systemInstruction: {
                parts: [{ text: SYSTEM_PROMPT }]
            },
            // --- ADDING GOOGLE SEARCH GROUNDING ---
            tools: [{ "google_search": {} }],
            // -------------------------------------
        };

        for (let i = 0; i < maxRetries; i++) {
            try {
                const response = await fetch(API_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (response.ok) {
                    return await response.json();
                } else if (response.status === 429 || response.status >= 500) {
                    console.warn(`API call failed (Status: ${response.status}). Retrying in ${delay / 1000}s...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                    delay *= 2;
                } else {
                    throw new Error(`API call failed with status: ${response.status}`);
                }
            } catch (error) {
                if (i === maxRetries - 1) {
                    console.error("Gemini API call failed after multiple retries:", error);
                    throw new Error("I apologize, but I couldn't connect to the server. Please try again later.");
                }
                await new Promise(resolve => setTimeout(resolve, delay));
                delay *= 2;
            }
        }
    };

    // --- MAIN CHAT FUNCTIONALITY ---
    const sendMessage = async () => {
        const messageText = userInput.value.trim();
        if (!messageText) return;

        userInput.value = '';
        sendButton.disabled = true;
        voiceButton.disabled = true;
        addMessage(messageText, true);

        try {
            const contents = [{ role: "user", parts: [{ text: messageText }] }];
            showLoading();

            const result = await fetchGeminiResponse(contents);
            
            const botResponse = result.candidates?.[0]?.content?.parts?.[0]?.text;
            
            if (botResponse) {
                addMessage(botResponse, false);
            } else {
                addMessage("I'm experiencing a high volume of queries right now. Please try again.", false);
            }

        } catch (error) {
            console.error("Chat Error:", error);
            addMessage(`**Error:** ${error.message || "An unexpected error occurred while fetching the response."}`, false);
        } finally {
            hideLoading();
            sendButton.disabled = false;
            voiceButton.disabled = false;
            userInput.focus();
            scrollToBottom();
        }
    };

    // --- INITIALIZATION ---
    window.onload = () => {
        showView('login');
        document.addEventListener('keypress', handleKeypress);
    };

</script>
</body>
</html>